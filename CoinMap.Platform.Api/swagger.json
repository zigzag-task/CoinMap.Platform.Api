{
  "openapi": "3.0.1",
  "info": {
    "title": "Example Web API",
    "description": "Description for the example Web API",
    "contact": {
      "name": "Author name",
      "email": "author-main@org.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0"
  },
  "paths": {
    "/api/{version}/token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Endpoint for new user registration.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          },
          {
            "name": "X-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/LoginQuery"
              }
            },
            "application/json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/LoginQuery"
              }
            },
            "text/json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/LoginQuery"
              }
            },
            "application/*+json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/LoginQuery"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "The request is not valid according to requirements"
          },
          "500": {
            "description": "Internal server error"
          },
          "200": {
            "description": "The request is successful"
          }
        }
      }
    },
    "/api/{version}/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Endpoint for new user registration.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          },
          {
            "name": "X-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/RegisterQuery"
              }
            },
            "application/json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/RegisterQuery"
              }
            },
            "text/json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/RegisterQuery"
              }
            },
            "application/*+json; ver=1.0": {
              "schema": {
                "$ref": "#/components/schemas/RegisterQuery"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "The request is not valid according to requirements"
          },
          "500": {
            "description": "Internal server error"
          },
          "200": {
            "description": "The request is successful"
          }
        }
      }
    },
    "/api/{version}/category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "This Endpoint returns a list of all categories.",
        "parameters": [
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          },
          {
            "name": "X-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "204": {
            "description": "There is no content"
          },
          "500": {
            "description": "Internal server error"
          },
          "200": {
            "description": "Returns list of all categories"
          }
        }
      }
    },
    "/api/{version}/venue/category/{category}": {
      "get": {
        "tags": [
          "Venue"
        ],
        "summary": "This Endpoint returns a list of all venues by category name.",
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "api-version",
            "in": "query",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          },
          {
            "name": "X-Version",
            "in": "header",
            "description": "The requested API version",
            "schema": {
              "type": "string",
              "default": "1.0"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Resourse can't be found"
          },
          "400": {
            "description": "The request is not valid according to requirements"
          },
          "500": {
            "description": "Internal server error"
          },
          "200": {
            "description": "Returns list of all categories"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthStatusEnum": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "BaseErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "description": "Status code",
            "format": "int32",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "nullable": true
          },
          "details": {
            "type": "string",
            "description": "Stack Trace of Exception",
            "nullable": true,
            "example": ""
          }
        },
        "additionalProperties": false
      },
      "CategoryResponse": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginQuery": {
        "required": [
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "userName": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterQuery": {
        "required": [
          "email",
          "password",
          "role",
          "userName"
        ],
        "type": "object",
        "properties": {
          "requestId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "userName": {
            "minLength": 1,
            "type": "string"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string"
          },
          "role": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RegisterResponse": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AuthStatusEnum"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VenueResponse": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "geolocation": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Bearer Authentication with JWT Token",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}